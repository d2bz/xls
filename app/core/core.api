// goctl api go --api core.api --dir .
syntax = "v1"

type (
	Status {
		StatusCode int    `json:"status_code"`
		StatusMsg  string `json:"status_msg"`
	}
	Token {
		AccessToken string `json:"access_token"`
		ExpireAt    int64  `json:"expire_at"`
	}
	RegisterRequest {
		Email            string `json:"email"`
		Password         string `json:"password"`
		VerificationCode string `json:"verification_code"`
	}
	RegisterResponse {
		Status
		Token
		UserID int `json:"user_id"`
	}
	LoginRequest {
		Email    string `json:"email"`
		Password string `json:"password"`
	}
	LoginResponse {
		Status
		Token
		UserID int `json:"user_id"`
	}
	VerificationRequest {
		Email string `json:"email"`
	}
	VerificationResponse {
		Status
	}
)

@server (
	prefix: /xls
)
service core-api {
	@handler RegisterLogic
	post /register (RegisterRequest) returns (RegisterResponse)

	@handler LoginLogic
	post /login (LoginRequest) returns (LoginResponse)

	@handler VerificationLogic
	post /verification (VerificationRequest) returns (VerificationResponse)
}

type (
	UploadVideoRequest {
	}
	UploadVideoResponse {
		Status
		Url string `json:"url"`
	}
	PublishVideoRequest {
		Url   string `json:"url"`
		Title string `json:"title"`
	}
	PublishVideoResponse {
		Status
		VideoID int `json:"video_id"`
	}
	LikeRequest {
		TargetID   uint64 `json:"target_id"`
		TargetType int32  `json:"target_type"`
	}
	LikeResponse {
		Status
	}
)

@server (
	prefix: /xls/video
	jwt:    Auth
)
service core-api {
	@handler UploadVideo
	post /upload (UploadVideoRequest) returns (UploadVideoResponse)

	@handler PublishVideo
	post /publishVideo (PublishVideoRequest) returns (PublishVideoResponse)

	@handler Like
	post /like (LikeRequest) returns (LikeResponse)
}